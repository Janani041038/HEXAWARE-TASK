 TASK 1   
CREATE DATABASE IF NOT EXISTS SISDB;
USE SISDB; 

CREATE TABLE Teacher (
    teacher_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);
CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    date_of_birth DATE,
    email VARCHAR(100),
    phone_number VARCHAR(15)
);
CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100),
    credits INT,
    teacher_id INT,
    FOREIGN KEY (teacher_id) REFERENCES Teacher(teacher_id)
);
CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES Courses(course_id) ON DELETE CASCADE
);
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    amount DECIMAL(10,2),
    payment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id) ON DELETE CASCADE
);
-- Teachers
INSERT INTO Teacher (first_name, last_name, email) VALUES
('Sarah', 'Smith', 'sarah.smith@example.com'),
('David', 'Jones', 'david.jones@example.com'),
('Emily', 'Brown', 'emily.brown@example.com'),
('Michael', 'Johnson', 'michael.johnson@example.com'),
('Linda', 'Taylor', 'linda.taylor@example.com'),
('James', 'White', 'james.white@example.com'),
('Laura', 'Green', 'laura.green@example.com'),
('Robert', 'Hall', 'robert.hall@example.com'),
('Anna', 'Lee', 'anna.lee@example.com'),
('Daniel', 'King', 'daniel.king@example.com');
-- Students
INSERT INTO Students (first_name, last_name, date_of_birth, email, phone_number) VALUES
('John', 'Doe', '1995-08-15', 'john.doe@example.com', '1234567890'),
('Jane', 'Johnson', '1997-04-10', 'jane.johnson@example.com', '2345678901'),
('Sam', 'Wilson', '1998-12-22', 'sam.wilson@example.com', '3456789012'),
('Chris', 'Evans', '1996-11-11', 'chris.evans@example.com', '4567890123'),
('Emma', 'Watson', '1995-09-09', 'emma.watson@example.com', '5678901234'),
('Tom', 'Holland', '1999-06-01', 'tom.holland@example.com', '6789012345'),
('Zoe', 'Kravitz', '2000-01-25', 'zoe.kravitz@example.com', '7890123456'),
('Mark', 'Ruffalo', '1994-10-30', 'mark.ruffalo@example.com', '8901234567'),
('Scarlett', 'Johansson', '1993-03-15', 'scarlett.j@example.com', '9012345678'),
('Robert', 'Downey', '1990-05-04', 'robert.d@example.com', '0123456789');
-- Courses
INSERT INTO Courses (course_name, credits, teacher_id) VALUES
('Introduction to Programming', 4, 1),
('Mathematics 101', 3, 2),
('Advanced Database Management', 4, 3),
('Web Development', 3, 4),
('Data Structures', 3, 5),
('Operating Systems', 4, 6),
('Computer Networks', 3, 7),
('Artificial Intelligence', 4, 8),
('Software Engineering', 3, 9),
('Computer Science 101', 4, 10);
-- Enrollments
INSERT INTO Enrollments (student_id, course_id, enrollment_date) VALUES
(1, 1, '2023-08-01'),
(1, 2, '2023-08-01'),
(2, 1, '2023-08-02'),
(3, 3, '2023-08-03'),
(4, 4, '2023-08-04'),
(5, 5, '2023-08-05'),
(6, 6, '2023-08-06'),
(7, 7, '2023-08-07'),
(8, 8, '2023-08-08'),
(9, 9, '2023-08-09');
-- Payments
INSERT INTO Payments (student_id, amount, payment_date) VALUES
(1, 300.00, '2023-04-10'),
(2, 500.00, '2023-04-11'),
(3, 200.00, '2023-04-12'),
(4, 350.00, '2023-04-13'),
(5, 400.00, '2023-04-14'),
(6, 250.00, '2023-04-15'),
(7, 300.00, '2023-04-16'),
(8, 500.00, '2023-04-17'),
(9, 450.00, '2023-04-18'),
(10, 600.00, '2023-04-19');

'task -2'
INSERT INTO Students (first_name, last_name, date_of_birth, email, phone_number)
VALUES ('John', 'Doe', '1995-08-15', 'john.doe@example.com', '1234567890'); 

INSERT INTO Enrollments (student_id, course_id, enrollment_date)
VALUES (1, 2, CURDATE()); -- or '2025-04-11' 

UPDATE Teacher
SET email = 'sarah.newemail@example.com'
WHERE teacher_id = 1; 

DELETE FROM Enrollments
WHERE student_id = 1 AND course_id = 2;

UPDATE Courses
SET teacher_id = 3
WHERE course_id = 2; 

DELETE FROM Students
WHERE student_id = 2;

UPDATE Payments
SET amount = 550.00
WHERE payment_id = 1;
 
 'task-3' 
SELECT s.student_id, s.first_name, s.last_name, SUM(p.amount) AS total_payment
FROM Students s
JOIN Payments p ON s.student_id = p.student_id
WHERE s.student_id = 1
GROUP BY s.student_id; 

SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id; 

SELECT s.student_id, s.first_name, s.last_name
FROM Students s
LEFT JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.enrollment_id IS NULL; 

SELECT s.first_name, s.last_name, c.course_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id; 

SELECT t.first_name AS teacher_first_name, t.last_name AS teacher_last_name, c.course_name
FROM Teacher t
JOIN Courses c ON t.teacher_id = c.teacher_id; 

SELECT s.first_name, s.last_name, e.enrollment_date
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Computer Science 101'; 

SELECT s.student_id, s.first_name, s.last_name
FROM Students s
LEFT JOIN Payments p ON s.student_id = p.student_id
WHERE p.payment_id IS NULL; 

SELECT c.course_id, c.course_name
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
WHERE e.enrollment_id IS NULL; 

SELECT s.student_id, s.first_name, s.last_name, COUNT(e.course_id) AS courses_enrolled
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id
HAVING COUNT(e.course_id) > 1; 

SELECT t.teacher_id, t.first_name, t.last_name
FROM Teacher t
LEFT JOIN Courses c ON t.teacher_id = c.teacher_id
WHERE c.course_id IS NULL; 

'task-4' 
SELECT AVG(student_count) AS avg_students_per_course
FROM (
    SELECT COUNT(e.student_id) AS student_count
    FROM Enrollments e
    GROUP BY e.course_id
) AS sub; 

SELECT s.student_id, s.first_name, s.last_name, p.amount
FROM Students s
JOIN Payments p ON s.student_id = p.student_id
WHERE p.amount = (
    SELECT MAX(amount) FROM Payments
);

SELECT c.course_id, c.course_name, COUNT(e.enrollment_id) AS total_enrollments
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id
HAVING COUNT(e.enrollment_id) = (
    SELECT MAX(enroll_count)
    FROM (
        SELECT COUNT(*) AS enroll_count
        FROM Enrollments
        GROUP BY course_id
    ) AS sub
);

SELECT t.teacher_id, t.first_name, t.last_name, SUM(p.amount) AS total_payment
FROM Teacher t
JOIN Courses c ON t.teacher_id = c.teacher_id
JOIN Enrollments e ON c.course_id = e.course_id
JOIN Payments p ON e.student_id = p.student_id
GROUP BY t.teacher_id;

SELECT s.student_id, s.first_name, s.last_name
FROM Students s
WHERE NOT EXISTS (
    SELECT course_id
    FROM Courses
    WHERE course_id NOT IN (
        SELECT e.course_id
        FROM Enrollments e
        WHERE e.student_id = s.student_id
    )
);

SELECT teacher_id, first_name, last_name
FROM Teacher
WHERE teacher_id NOT IN (
    SELECT DISTINCT teacher_id FROM Courses WHERE teacher_id IS NOT NULL
);

SELECT AVG(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS avg_age
FROM Students;

SELECT course_id, course_name
FROM Courses
WHERE course_id NOT IN (
    SELECT DISTINCT course_id FROM Enrollments
);

SELECT s.student_id, s.first_name, c.course_name, SUM(p.amount) AS total_payment
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
JOIN Payments p ON s.student_id = p.student_id
GROUP BY s.student_id, c.course_id;

SELECT s.student_id, s.first_name, s.last_name, COUNT(p.payment_id) AS num_payments
FROM Students s
JOIN Payments p ON s.student_id = p.student_id
GROUP BY s.student_id
HAVING COUNT(p.payment_id) > 1;

SELECT s.student_id, s.first_name, s.last_name, SUM(p.amount) AS total_payment
FROM Students s
JOIN Payments p ON s.student_id = p.student_id
GROUP BY s.student_id;

SELECT c.course_name, COUNT(e.student_id) AS enrolled_count
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id;

SELECT AVG(p.amount) AS avg_payment
FROM Payments p;














 






